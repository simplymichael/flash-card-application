server {
  listen 80;
  listen [::]:80;
  resolver 127.0.0.11 ipv6=off;

  # Useful for Let's Encrypt
  location /.well-known/acme-challenge/ { root /usr/share/nginx/html; allow all; }
  location / { return 301 https://$host$request_uri; }
}

server {
  listen 443 ssl http2;
  listen [::]:443 ssl http2;
  resolver 127.0.0.11 ipv6=off;

  ssl_protocols TLSv1.2;
  ssl_ciphers HIGH:!MEDIUM:!LOW:!aNULL:!NULL:!SHA;
  ssl_prefer_server_ciphers on;
  ssl_session_cache shared:SSL:10m;

  #ssl_certificate     /etc/letsencrypt/pubkey.crt;
  ssl_certificate     /etc/letsencrypt/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/privkey.pem;

  location / {
    # The client is a React app, which is created in the build/ directory
    # when we run our build script.
    # In the docker-compose file, we bind that build directory to the nginx public directory,
    # from which nginx serves files
    root   /usr/share/nginx/html;
    index  index.html index.htm;
    try_files $uri $uri/ /index.html;
  }
}

server {
  listen 3000 ssl http2;
  listen [::]:3000;
  resolver 127.0.0.11 ipv6=off;

  ssl_protocols TLSv1.2;
  ssl_ciphers HIGH:!MEDIUM:!LOW:!aNULL:!NULL:!SHA;
  ssl_prefer_server_ciphers on;
  ssl_session_cache shared:SSL:10m;

  ssl_certificate     /etc/letsencrypt/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/privkey.pem;

  location / {
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    # We started our node/API server using https.createServer()
    # So, we have to use the https:// scheme
    # Otherwise, we'll get an "upstream closed connection" error
    proxy_pass https://api:443;
  }
}
